version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - mynetwork

  migrate:
    image: migrate/migrate
    networks:
      - mynetwork
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database",  
                "postgres://postgres:20005@4exam_auth:5432/auth_exam?sslmode=disable", 
                "up" ]
    depends_on:
      - postgres-db

  postgres-db:
    container_name: 4exam_auth
    image: postgres:latest
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: 20005
      POSTGRES_DB: auth_exam
    volumes:
      - db:/post-database/post-memory
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  auth-service:
    container_name: auth-service_exam
    build: .
    depends_on:
      - zookeeper
      - kafka
      - postgres-db
    ports:
      - "8085:8085"
      - "9999:9999"
    networks:
      - mynetwork

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6378:6379"
    volumes:
      - redis-data:/data
    networks:
      - mynetwork

networks:
  mynetwork:
    external: true
    name: global-network
    driver: bridge

volumes:
  db:
  redis-data:
    driver: local
